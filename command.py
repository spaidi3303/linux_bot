import os
import subprocess
from aiogram import F, Router, types
router = Router()

@router.message(F.text)
async def execute_command(message: types.Message):
    user_command = message.text.strip()
    if "|" in user_command:
        for half in user_command.split("|"):
            half = half.strip()
            await execute_comm(message, half)
    else:
        await execute_comm(message, user_command)


async def execute_comm(message: types.Message, command: str):
    try:
        if command.strip().startswith('cd '):
            new_dir = os.path.expanduser(command.strip()[3:].strip())
            try:
                os.chdir(new_dir)
                current_dir = os.getcwd()
                await message.answer(f"üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:\n<code>{current_dir}</code>",
                                     parse_mode="HTML")
                return
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ cd:\n<code>{str(e)}</code>",
                                     parse_mode="HTML")
                return
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=10
        )
        response = []
        if result.stdout:
            response.append(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n<code>{result.stdout}</code>")
        if result.stderr:
            response.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞:\n<code>{result.stderr}</code>")
        if result.returncode == 0 and not (result.stdout or result.stderr):
            response.append("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)")

        if response:
            await message.answer("\n\n".join(response), parse_mode="HTML")

    except subprocess.TimeoutExpired:
        await message.answer("‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (10 —Å–µ–∫)")
    except FileNotFoundError:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        await message.answer(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n<code>{str(e)}</code>",
                             parse_mode="HTML")